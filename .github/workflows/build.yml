name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
    version:
      name: Get Version
      runs-on: ubuntu-latest
      outputs:
        version: ${{ steps.version.outputs.version }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 150
            fetch-tags: true

        - name: Version
          id: version
          uses: paulhatch/semantic-version@v5.0.2
          with:
            tag_prefix: "v"
            bump_each_commit: true

    build-win:
        name: build-windows
        runs-on: windows-latest
        needs: [ version ]

        steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
              fetch-depth: 0

        # Install the .NET Core workload
        - name: Install .NET Core
          uses: actions/setup-dotnet@v4
          with:
              dotnet-version: 8.0.x

        # Restore the application to populate the obj folder with RuntimeIdentifiers
        - name: Restore the application
          run: dotnet restore NeoforgeUpdater.csproj

        - name: Build
          run: |
              dotnet build -c Release --no-restore /property:Version=${{ needs.version.outputs.version }}
              dotnet publish NeoforgeUpdater.csproj -c Release -r win-x64 -o publish/windows /property:Version=${{ needs.version.outputs.version }}
        
        - name: Archive Release
          uses: thedoctor0/zip-release@0.7.5
          with:
            type: 'zip'
            filename: '../win-x64.zip'
            directory: 'publish/windows'

        - name: Upload build artifacts
          uses: actions/upload-artifact@v4
          with:
              name: win-x64
              path: publish/win-x64.zip

    release:
        name: Release
        needs: [ version, build-win ]
        runs-on: ubuntu-latest

        steps:
        - name: Pull Binaries
          uses: actions/download-artifact@v4
          with:
            name: win-x64

        - uses: "marvinpinto/action-automatic-releases@latest"
          with:
            repo_token: "${{ secrets.RELEASES_TOKEN }}"
            prerelease: false
            automatic_release_tag: "latest"
            title: "Release ${{ needs.version.outputs.version }}"
            files: |
              win-x64.zip